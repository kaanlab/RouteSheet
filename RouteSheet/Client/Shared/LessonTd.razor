@if (lessons.Count() > 0)
{
    <td>
        <div  class="route-sheet-td">
        @foreach (var lesson in lessons)
        {
            <MudCard Class="route-sheet-card">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Занятие</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        @if (lesson.Prioriy == Priority.High)
                        {
                            <MudIconButton Icon="@Icons.Filled.PriorityHigh" Color="Color.Error" />
                        }
                        else
                        {
                            <MudIconButton Icon="@Icons.Filled.LowPriority" Color="Color.Default" />
                        }
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>@lesson.Title</MudText>
                    <MudText Typo="Typo.body2">@lesson.AppUser.Name</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudIcon Icon="@Icons.Material.Filled.Edit" @onclick="@((e) => OnUpdateLesson(lesson))" Color="Color.Info" Class="icon"></MudIcon>
                    <MudIcon Icon="@Icons.Material.Filled.Delete" @onclick="@((e) => OnDeleteLesson(lesson))" Color="Color.Error" Class="icon"></MudIcon>
                </MudCardActions>
            </MudCard>            
        }
        </div>
    </td>
}
else
{
    <td>
        <div class="route-sheet-td"></div>
    </td>
}


@code {

    [CascadingParameter]
    RouteSheetTable RouteSheetTable { get; set; }

    [Parameter]
    public DateTime FirsDayOfWeek { get; set; }

    [Parameter]
    public int CurrentDate { get; set; }

    [Parameter]
    public int CurrentHour { get; set; }

    List<Lesson> lessons;

    protected override void OnParametersSet()
    {
        lessons = GetLessons();
    }

    private async Task OnDeleteLesson(Lesson context)
    {
        await RouteSheetTable.DeleteLesson(context);
    }

    private async Task OnUpdateLesson(Lesson context)
    {
        await RouteSheetTable.UpdateLesson(context);
    }

    private List<Lesson> GetLessons() =>
        RouteSheetTable.lessons
                .Where(d => ((int)d.Date.Value.DayOfWeek == (CurrentDate + 1) && d.Hour == CurrentHour && d.Date.Value.DayOfYear == FirsDayOfWeek.AddDays(CurrentDate).DayOfYear))
                .OrderBy(l => l.Prioriy)
                .ToList();

}
