@using System.Text.Json

@inject HttpClient httpClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (cadets is not null)
{
    <MudTable Items="@cadets" Hover="true" Class="my-5">
        <ToolBarContent>
            <MudIconButton Icon="@Icons.Material.Filled.AddBox" Color="Color.Primary" Size="Size.Large" @onclick="AddCadet" Class="mr-3" />
            <MudText Typo="Typo.h6">Кадеты</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Ф.И.О</MudTh>
            <MudTh>Класс</MudTh>
            <MudTh></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Ф.И.О">@context.Name</MudTd>
            <MudTd DataLabel="Класс">@context.Classroom?.Name</MudTd>
            <MudTd><MudButton Color="Color.Info" @onclick="@((e) => UpdateCadet(context))">Изменить</MudButton></MudTd>
            <MudTd><MudButton Color="Color.Error" @onclick="@((e) => DeleteCadet(context))">Удалить</MudButton></MudTd>
        </RowTemplate>
    </MudTable>
}
else
{
    <MudProgressCircular Indeterminate="true"></MudProgressCircular>
}



@code {
    private List<CadetViewModel> cadets;

    protected override async Task OnInitializedAsync()
    {
        cadets = await httpClient.GetFromJsonAsync<List<CadetViewModel>>("api/cadets/all");
    }

    private async Task AddCadet()
    {
        var dialog = DialogService.Show<CadetAddDialog>("Добавление нового кадета");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var response = await httpClient.PostAsJsonAsync<CadetViewModel>("api/cadets/add", result.Data as CadetViewModel);
            if (response.IsSuccessStatusCode)
            {
                var addedCadet = await response.Content.ReadFromJsonAsync<CadetViewModel>();
                cadets.Add(addedCadet);
                Snackbar.Add("Кадет успешно добавлен!", Severity.Success);
            }
            else
            {
                var problem = await response.Content.ReadFromJsonAsync<ProblemDetails>();
                Snackbar.Add($"Не могу добавить кадета! {problem.Title}", Severity.Error);
            }
        }
    }

    private async Task UpdateCadet(CadetViewModel context)
    {
        var parameters = new DialogParameters { ["context"] = context };

        var dialog = DialogService.Show<CadetUpdateDialog>("Обновить данные о кадете", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var response = await httpClient.PutAsJsonAsync<CadetViewModel>("api/cadets/update", result.Data as CadetViewModel);
            if (response.IsSuccessStatusCode)
            {
                var updatedCadet = await response.Content.ReadFromJsonAsync<CadetViewModel>();
                var index = cadets.IndexOf(context);
                cadets.Remove(context);
                cadets.Insert(index, updatedCadet);
                Snackbar.Add("Информация о кадете успешно обновлена!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Не могу обновить информацию о кадете!", Severity.Error);
            }
        }
    }

    private async Task DeleteCadet(CadetViewModel context)
    {
        var parameters = new DialogParameters { ["context"] = context };

        var dialog = DialogService.Show<CadetDeleteDialog>("Удалить кадета", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var nationalityToDelete = result.Data as CadetViewModel;
            var response = await httpClient.DeleteAsync($"api/cadets/delete/{nationalityToDelete.Id}");
            if (response.IsSuccessStatusCode)
            {
                cadets.Remove(nationalityToDelete);
                Snackbar.Add("Информация о кадете успешно удалена!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Не могу удалить информацию о кадете!", Severity.Error);
            }
        }
    }

}
