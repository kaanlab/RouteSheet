@page "/login"

@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Авторизация</PageTitle>

<div class="d-flex justify-center mt-6">

    <MudItem xs="8" md="8">
        <div class="flex-column">
            <MudText Typo="Typo.h4">Авторизация</MudText>
            @if (ShowAuthError)
            {
                <MudText Color="@Color.Error">
                    <p>@Error</p>
                </MudText>
            }
            <EditForm Model="loginModel" OnValidSubmit="ExecuteLogin">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Логин"
                                      @bind-Value="loginModel.Login" For="@(() => loginModel.Login)" />
                        <MudTextField Label="Пароль" Class="mt-3"
                                      @bind-Value="loginModel.Password" For="@(() => loginModel.Password)" InputType="InputType.Password" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Вход</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
        </div>
    </MudItem>
</div>

@code {
    LoginViewModel loginModel = new LoginViewModel();

    bool ShowAuthError;
    string Error;

    async Task ExecuteLogin()
    {
        ShowAuthError = false;
        var result = await AuthService.Login(loginModel);
        if (!result.Successful)
        {
            Error = result.Error;
            ShowAuthError = true;
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }
    }