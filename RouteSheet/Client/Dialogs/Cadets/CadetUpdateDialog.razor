@inject HttpClient httpClient

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6" Color="Color.Info">
            <MudIcon Icon="@Icons.Material.Filled.Update" Title="Add" />
            @MudDialog.Title
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField T="string" Label="Ф.И.О." @bind-Text="Context.Name" />
        <br />
        <div>
            <MudText Typo="Typo.h5">Класс</MudText><br />
            <MudSelect @bind-Value="SelectedValue" >
                @if (classrooms is null)
                {

                }
                else
                {
                    @foreach (var item in classrooms)
                    {
                        <MudSelectItem Value="@item.Name">@item.Name</MudSelectItem>
                    }
                }
            </MudSelect>
            <br />
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Отмена</MudButton>

        <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="UpdateCadet">Сохранить</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public CadetViewModel Context { get; set; }

    List<ClassroomViewModel> classrooms;

    string SelectedValue { get; set; }
    int id;

    protected override async Task OnInitializedAsync()
    {
        classrooms = await httpClient.GetFromJsonAsync<List<ClassroomViewModel>>("api/classrooms/all");
        SelectedValue = Context.Classroom.Name;
        //id = classrooms.First(x => x.Id == Context.Classroom.Id);
    }

    public void UpdateCadet()
    {
        Context.Classroom = classrooms.First(x => x.Name == SelectedValue); 
        MudDialog.Close(DialogResult.Ok(Context));
    }

    private void Cancel() => MudDialog.Cancel();
}