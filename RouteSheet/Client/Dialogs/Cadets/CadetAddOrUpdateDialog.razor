@inject HttpClient httpClient

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6" Color="Color.Info">
            <MudIcon Icon="@Icons.Material.Filled.Update" Title="Add" />
            @MudDialog.Title
        </MudText>
    </TitleContent>
   
    <DialogContent>
        <MudForm Model="@Context" @ref="@form">
        <MudTextField Label="Ф.И.О." @bind-Value="Context.Name" Validation="@(cadetValidator.ValidateValue)" For="@(() => Context.Name)" />
        <br />
        <div>
            <MudSelect Label="Выберите класс" @bind-Value="Context.Classroom.Name" Validation="@(cadetValidator.ValidateValue)" For="@(() => Context.Classroom.Name)">
                @if (classrooms is null)
                {
                    <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true"/>
                }
                else
                {
                    @foreach (var item in classrooms)
                    {
                        <MudSelectItem Value="@item.Name">@item.Name</MudSelectItem>
                    }
                }
            </MudSelect>
            <br />
        </div>
        </MudForm>
    </DialogContent>
 
    <DialogActions>
        <MudButton OnClick="Cancel">Отмена</MudButton>

        <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="UpdateCadet">Сохранить</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public CadetViewModel Context { get; set; } = new CadetViewModel() { Classroom = new ClassroomViewModel() };

    List<ClassroomViewModel> classrooms;

    MudForm form;

    CadetValidator cadetValidator = new CadetValidator();

    protected override async Task OnInitializedAsync()
    {
        classrooms = await httpClient.GetFromJsonAsync<List<ClassroomViewModel>>("api/classrooms/all");
    }

    private async Task UpdateCadet()
    {
        await form.Validate();
        if(form.IsValid)
        {
           Context.Classroom = classrooms.First(x => x.Name == Context.Classroom.Name);
           MudDialog.Close(DialogResult.Ok(Context));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}